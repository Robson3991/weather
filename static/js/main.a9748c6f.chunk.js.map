{"version":3,"sources":["styles/colors.ts","styles/variables.ts","styles/GlobalStyles.ts","components/atoms/ErrorMessage.tsx","img/loader.gif","components/atoms/Loader.tsx","constants/links.ts","hooks/useWeather.ts","store/hooks/index.ts","store/slices/weather.ts","components/atoms/Celsius.tsx","components/molecules/CurrentWeather.tsx","components/molecules/DayWeather.tsx","components/organisms/DailyWeather.tsx","components/pages/Home.tsx","constants/theme.ts","store/instance.ts","components/atoms/Container.ts","components/atoms/CityInput.tsx","components/molecules/Header.tsx","App.tsx","index.tsx"],"names":["colors","css","variables","GlobalStyle","createGlobalStyle","ErrorMessage","styled","p","Wrapper","div","Loader","src","loader","apiWeatherUrl","weatherIcon","icon","getWeather","city","a","axios","get","process","cityData","data","coord","lat","lon","useWeather","useQuery","enabled","useAppDispatch","useDispatch","useAppSelector","useSelector","localeSlice","createSlice","name","initialState","reducers","weatherChange","state","action","payload","actions","Number","size","Celsius","value","props","parseInt","toFixed","CelsiusWrapper","CurrentMore","CurrentWeather","weather","sys","country","current","temp","main","feels_like","humidity","Day","span","Temperatures","Night","Icon","img","DayWeather","day","nightTemp","description","alt","title","DailyWeather","daily","map","index","dayjs","add","format","night","Home","error","isFetching","dispatch","useEffect","theme","breakpoints","sm","md","lg","xl","store","configureStore","reducer","weatherReducer","Container","Input","input","CityInput","useState","text","setText","isError","onChange","e","target","placeholder","header","Header","App","queryClient","QueryClient","QueryClientProvider","client","GlobalStyles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9748c6f.chunk.js","sourcesContent":["import { css } from 'styled-components';\n\nconst colors = css`\n  :root {\n    --color-white: #fff;\n    --color-white-rgb: 255, 255, 255;\n    --color-black: #000;\n    --color-black-rgb: 0, 0, 0;\n    --color-primary: #096ce9;\n    --color-primary-rgb: 09, 108, 233;\n    --color-gray: #7a7a7a;\n    --color-error: #bc0000;\n  }\n`;\n\nexport default colors;\n","import { css } from 'styled-components';\n\nconst variables = css`\n  :root {\n    --transition: 0.3s;\n    --font-primary: 'Montserrat', sans-serif;\n  }\n`;\n\nexport default variables;\n","import { createGlobalStyle } from 'styled-components';\nimport colors from './colors';\nimport variables from './variables';\n\nconst GlobalStyle = createGlobalStyle`\n\n  ${colors}\n  ${variables}\n\n  * {\n    box-sizing: border-box;\n    &::before,\n    &::after {\n      box-sizing: inherit;\n    }\n  }\n\n  html {\n    font-size: 62.5%; /* 1rem === 10px */\n  }\n\n  body {\n    font-family: var(--font-primary);\n    font-size: 1.8rem;\n    font-weight: 400;\n    background-color: var(--color-primary);\n    margin: 0;\n    padding: 0;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  h1, h2, h3, h4, h5, h6, p {\n    color: var(--color-white);\n    margin: 0;\n  }\n\n  /* Chrome, Safari, Edge, Opera */\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type=number] {\n    -moz-appearance: textfield;\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.p`\n  color: var(--color-error);\n`;\n\nexport default ErrorMessage;\n","export default __webpack_public_path__ + \"static/media/loader.d3fbaf2b.gif\";","import styled from 'styled-components';\nimport loader from 'img/loader.gif';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  padding: 10px;\n`;\n\nconst Loader = () => (\n  <Wrapper>\n    <img src={loader} />\n  </Wrapper>\n);\n\nexport default Loader;\n","export const apiWeatherUrl = 'https://api.openweathermap.org/data/2.5';\nexport const weatherIcon = (icon: string) =>\n  `https://openweathermap.org/img/wn/${icon}@2x.png`;\n","import axios from 'axios';\nimport { useQuery } from 'react-query';\nimport { apiWeatherUrl } from 'constants/links';\n\nconst getWeather = async (city: string) => {\n  const { data: cityData } = await axios.get(\n    `${apiWeatherUrl}/weather?q=${city}&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`,\n  );\n\n  const { coord } = cityData;\n\n  const { data } = await axios.get(\n    `${apiWeatherUrl}/onecall?lat=${coord.lat}&lon=${coord.lon}&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric&exclude=minutely,hourly`,\n  );\n\n  return { ...cityData, ...data };\n};\n\nfunction useWeather(city: string) {\n  return useQuery(['weather', city], () => getWeather(city), {\n    enabled: !!city,\n  });\n}\n\nexport default useWeather;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from 'store/instance';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../instance';\nimport { IWeather } from 'types';\n\ninterface WeatherState {\n  data: IWeather | null;\n}\n\ntype LocalePayload = IWeather;\n\nconst inistialState: WeatherState = {\n  data: null,\n};\n\nconst localeSlice = createSlice({\n  name: 'localeData',\n  initialState: inistialState,\n  reducers: {\n    weatherChange: (state, action: PayloadAction<LocalePayload>) => {\n      state.data = action.payload;\n    },\n  },\n});\n\nexport const { weatherChange } = localeSlice.actions;\nexport const selectLocale = (state: RootState) => state.weather;\n\nexport default localeSlice.reducer;\n","import styled from 'styled-components';\n\ninterface CelsiusProps {\n  value: number;\n  size: number;\n  [x: string]: any;\n}\n\nconst Number = styled.p<Partial<CelsiusProps>>`\n  font-size: ${({ size }) => size && `${size / 10}rem`};\n`;\n\nconst Celsius: React.FC<CelsiusProps> = ({ value, size, ...props }) => (\n  <Number size={size} {...props}>\n    {parseInt(value.toFixed())}\n    <span>&#8451;</span>\n  </Number>\n);\n\nexport default Celsius;\n","import { useAppSelector } from 'store/hooks';\nimport styled from 'styled-components';\nimport { IWeather } from 'types';\nimport Celsius from 'components/atoms/Celsius';\nimport { weatherIcon } from 'constants/links';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 50px 0;\n`;\n\nconst CelsiusWrapper = styled.p`\n  margin: 1rem 0;\n`;\n\nconst CurrentMore = styled.div`\n  display: flex;\n  margin-top: 1rem;\n  color: var(--color-white);\n  font-weight: 300;\n\n  span {\n    margin: 0 5px;\n  }\n`;\n\nconst CurrentWeather = () => {\n  const { data } = useAppSelector((state) => state.weather);\n\n  if (!data) return <>error</>;\n\n  const weather: IWeather = data as IWeather;\n\n  return (\n    <Wrapper>\n      <img src={weatherIcon(weather.weather[0].icon)} />\n      <p>\n        {weather.name}, {weather.sys.country}\n      </p>\n      <CelsiusWrapper>\n        <Celsius value={weather.current.temp} size={32} />\n      </CelsiusWrapper>\n      <p>{weather.weather[0].main}</p>\n      <CurrentMore>\n        <span>Feels like: {weather.current.feels_like}</span>\n        <span>Humidity: {weather.current.humidity}%</span>\n      </CurrentMore>\n    </Wrapper>\n  );\n};\n\nexport default CurrentWeather;\n","import styled from 'styled-components';\nimport Celsius from 'components/atoms/Celsius';\nimport { weatherIcon } from 'constants/links';\nimport dayjs from 'dayjs';\n\ninterface DayWeatherProps {\n  day: string | number | Date | dayjs.Dayjs | null | undefined;\n  icon: string;\n  temp: number;\n  nightTemp: number;\n  description: string;\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: var(--color-white);\n  padding: 20px;\n  background: rgba(var(--color-black-rgb), 0.1);\n  border-radius: 10px;\n  margin: 0 15px 20px 0;\n`;\n\nconst Day = styled.span`\n  font-size: 1.4rem;\n`;\n\nconst Temperatures = styled.div`\n  display: flex;\n  align-items: flex-end;\n`;\n\nconst Night = styled(Celsius)`\n  display: inline-block;\n  margin-left: 10px;\n  color: rgba(var(--color-black), 0.7);\n`;\n\nconst Icon = styled.img`\n  width: 50px;\n  height: 50px;\n`;\n\nconst DayWeather: React.FC<DayWeatherProps> = ({\n  day,\n  icon,\n  temp,\n  nightTemp,\n  description,\n}) => {\n  return (\n    <Wrapper>\n      <Day>{day}</Day>\n      <Icon src={weatherIcon(icon)} alt=\"weather icon\" title={description} />\n      <Temperatures>\n        <Celsius size={20} value={temp} />\n        <Night size={14} value={nightTemp} />\n      </Temperatures>\n    </Wrapper>\n  );\n};\n\nexport default DayWeather;\n","import styled from 'styled-components';\nimport DayWeather from 'components/molecules/DayWeather';\nimport { useAppSelector } from 'store/hooks';\nimport dayjs from 'dayjs';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst DailyWeather = () => {\n  const { data } = useAppSelector((state) => state.weather);\n\n  if (!data) return <></>;\n\n  return (\n    <Wrapper>\n      {data.daily.map((day, index) => {\n        if (index < 5) {\n          return (\n            <DayWeather\n              key={index}\n              day={dayjs()\n                .add(index + 1, 'day')\n                .format('DD.MM.YYYY')}\n              temp={day.temp.day}\n              description={day.weather[0].description}\n              icon={day.weather[0].icon}\n              nightTemp={day.temp.night}\n            />\n          );\n        }\n      })}\n    </Wrapper>\n  );\n};\n\nexport default DailyWeather;\n","import { useEffect } from 'react';\nimport ErrorMessage from 'components/atoms/ErrorMessage';\nimport Loader from 'components/atoms/Loader';\nimport useWeather from 'hooks/useWeather';\nimport { useAppDispatch } from 'store/hooks';\nimport { weatherChange } from 'store/slices/weather';\nimport CurrentWeather from 'components/molecules/CurrentWeather';\nimport DailyWeather from 'components/organisms/DailyWeather';\n\nconst Home: React.FC = () => {\n  const { data, error, isFetching } = useWeather('Poznań');\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (data) {\n      dispatch(weatherChange(data));\n    }\n  }, [data]);\n\n  if (isFetching) return <Loader />;\n  if (error)\n    return <ErrorMessage>there was a problem downloading data</ErrorMessage>;\n\n  return (\n    <>\n      <CurrentWeather />\n      <DailyWeather />\n    </>\n  );\n};\n\nexport default Home;\n","const theme = {\n  breakpoints: {\n    sm: '360px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n  },\n};\n\nexport default theme;\n","import { configureStore } from '@reduxjs/toolkit';\nimport weatherReducer from './slices/weather';\n\nconst store = configureStore({\n  reducer: {\n    weather: weatherReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 0 20px;\n`;\n\nexport default Container;\n","/* eslint-disable no-extra-boolean-cast */\nimport { useState } from 'react';\nimport useWeather from 'hooks/useWeather';\nimport { useAppDispatch } from 'store/hooks';\nimport { weatherChange } from 'store/slices/weather';\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n  height: 40px;\n  width: 100%;\n  max-width: 300px;\n  padding: 0 10px;\n  font-size: 1.5rem;\n`;\n\nconst CityInput: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const [text, setText] = useState('');\n\n  const { data, isError } = useWeather(text);\n\n  if (data && !isError) dispatch(weatherChange(data));\n\n  return (\n    <Input\n      onChange={(e) => setText(e.target.value)}\n      value={text}\n      placeholder=\"write city name\"\n    />\n  );\n};\n\nexport default CityInput;\n","import CityInput from 'components/atoms/CityInput';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.header`\n  padding: 40px 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: rgba(var(--color-black-rgb), 0.1);\n`;\n\nconst Header = () => (\n  <Wrapper>\n    <CityInput />\n  </Wrapper>\n);\n\nexport default Header;\n","import GlobalStyles from './styles/GlobalStyles';\nimport Home from 'components/pages/Home';\nimport { ThemeProvider } from 'styled-components';\nimport theme from 'constants/theme';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { Provider } from 'react-redux';\nimport store from 'store/instance';\nimport Container from 'components/atoms/Container';\nimport Header from 'components/molecules/Header';\n\nfunction App() {\n  const queryClient = new QueryClient();\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <GlobalStyles />\n          <Header />\n          <Container>\n            <Home />\n          </Container>\n        </Provider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}